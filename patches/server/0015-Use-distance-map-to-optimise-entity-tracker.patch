From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Mon, 7 Oct 2019 04:53:46 -0700
Subject: [PATCH] Use distance map to optimise entity tracker

Add a new config option to enable tracking entities by a chunk range.

diff --git a/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java b/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
index a541e9e87f8d56a6fd228e0e806a633090f6fa11..77b0b467dd7ede58bf3da36be8d5777e1682488e 100644
--- a/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
+++ b/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
@@ -280,6 +280,26 @@ public final class TuinityConfig {
         private void noTickViewDistance() {
             this.noTickViewDistance = this.getInt("no-tick-view-distance", -1);
         }
+
+        public boolean useOptimizedTracker;
+        public int optimizedTrackerTrackRange;
+        public int optimizedTrackerUntrackRange;
+
+        private void optimizetracker() {
+            this.useOptimizedTracker = this.getBoolean("optimized-tracker", true);
+            this.optimizedTrackerTrackRange = this.getInt("optimized-tracker-track-range", -1);
+            this.optimizedTrackerUntrackRange = this.getInt("optimized-tracker-untrack-range", -1);
+            if (!this.useOptimizedTracker) {
+                this.optimizedTrackerTrackRange = -1;
+                this.optimizedTrackerUntrackRange = -1;
+                return;
+            }
+            if (this.optimizedTrackerTrackRange != this.optimizedTrackerUntrackRange && (this.optimizedTrackerTrackRange | this.optimizedTrackerUntrackRange) == -1) {
+                // TODO error here
+                this.optimizedTrackerTrackRange = -1;
+                this.optimizedTrackerUntrackRange = -1;
+            }
+        }
     }
 
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 862a64b6fdb6f86dc2699ecc4aa83f67bf16861b..38175da4c614d92ac6bd0c9f0af8103342dd13e4 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -210,6 +210,105 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
     // CraftBukkit end
 
+    // Tuinity start
+    // ender dragon is special cased for its large range, player is special cased for spectator mode + npc plugins
+    boolean isLegacyTrackingEntity = this instanceof EntityEnderDragon || this instanceof EntityPlayer;
+
+    public final void setLegacyTrackingEntity(final boolean isLegacyTrackingEntity) {
+        com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Cannot update legacy tracking off of the main thread");
+        if (this.isLegacyTrackingEntity == isLegacyTrackingEntity) {
+            return;
+        }
+
+        if (this.world == null) {
+            this.isLegacyTrackingEntity = isLegacyTrackingEntity;
+            return;
+        }
+
+        WorldServer world = (WorldServer)this.world;
+        PlayerChunkMap chunkMap = world.getChunkProvider().playerChunkMap;
+
+        if (chunkMap.playerEntityTrackerTrackMap == null) {
+            this.isLegacyTrackingEntity = isLegacyTrackingEntity;
+            return;
+        }
+
+        if (this.isLegacyTrackingEntity) {
+            this.isLegacyTrackingEntity = false;
+            chunkMap.activelyTrackedEntitiesLegacy.remove(this);
+
+            PlayerChunkMap.EntityTracker tracker = chunkMap.trackedEntities.get(this.getId());
+            if (tracker != null) {
+                for (EntityPlayer player : world.getPlayers()) {
+                    tracker.removeTrackingPlayer(player);
+                    tracker.updatePlayer(player);
+                }
+            }
+        } else {
+            this.isLegacyTrackingEntity = true;
+            chunkMap.activelyTrackedEntitiesLegacy.add(this);
+
+            PlayerChunkMap.EntityTracker tracker = this.tracker;
+            if (tracker != null) {
+                com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> inRange = chunkMap.playerEntityTrackerTrackMap.getObjectsInRange(com.tuinity.tuinity.util.Util.getCoordinateKey(this));
+
+                for (EntityPlayer player : world.getPlayers()) {
+                    tracker.clear(player);
+                    if (inRange != null && inRange.contains(player)) {
+                        tracker.updateTrackingPlayer(player);
+                    }
+                }
+            }
+        }
+    }
+
+    // We queue changes to tracker here because when adding to a chunk we do not know if the entity is in a trackable state
+    public final it.unimi.dsi.fastutil.ints.IntOpenHashSet trackQueue = new it.unimi.dsi.fastutil.ints.IntOpenHashSet(1, 0.8f);
+    public final it.unimi.dsi.fastutil.ints.IntOpenHashSet unTrackQueue = new it.unimi.dsi.fastutil.ints.IntOpenHashSet(1, 0.8f);
+
+    public final void addToTrackQueue(EntityPlayer player) {
+        if (player == this) {
+            return;
+        }
+        int id = player.getId();
+        this.trackQueue.add(id);
+        if (!this.unTrackQueue.isEmpty()) {
+            this.unTrackQueue.remove(id);
+        }
+        ((WorldServer)this.world).trackingUpdateQueue.add(this);
+    }
+
+    public final void addToUntrackQueue(EntityPlayer player) {
+        if (player == this) {
+            return;
+        }
+        int id = player.getId();
+        if (!this.trackQueue.isEmpty()) {
+            this.trackQueue.remove(id);
+        }
+        this.unTrackQueue.add(id);
+        ((WorldServer)this.world).trackingUpdateQueue.add(this);
+    }
+
+    public final void clearTrackingQueues(EntityPlayer player) {
+        if (player == this) {
+            return;
+        }
+        int id = player.getId();
+        if (!this.trackQueue.isEmpty()) {
+            this.trackQueue.remove(id);
+        }
+        if (!this.unTrackQueue.isEmpty()) {
+            this.unTrackQueue.remove(id);
+        }
+        if (this.trackQueue.isEmpty() && this.unTrackQueue.isEmpty()) {
+            ((WorldServer)this.world).trackingUpdateQueue.remove(this);
+        }
+    }
+
+
+    // Tuinity end
+
     public Entity(EntityTypes<?> entitytypes, World world) {
         this.id = Entity.entityCount.incrementAndGet();
         this.passengers = Lists.newArrayList();
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 40d6e8bf7c34d91bbc44d23efc498daa4f61b7e2..b4d3c4a4f9c0041f1bdf4ef32db0bbb3d011c3d1 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -18,7 +18,7 @@ import org.bukkit.event.player.PlayerVelocityEvent;
 public class EntityTrackerEntry {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    private final WorldServer b;
+    private final WorldServer b; private WorldServer getWorld() { return this.b; } // Tuinity - OBFHELPER
     private final Entity tracker;
     private final int d;
     private final boolean e;
@@ -70,6 +70,7 @@ public class EntityTrackerEntry {
         this.r = entity.onGround;
     }
 
+    public final void tick() { this.a(); } // Tuinity - OBFHELPER
     public void a() {
         com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Tracker update"); // Tuinity
         List<Entity> list = this.tracker.getPassengers();
@@ -108,8 +109,8 @@ public class EntityTrackerEntry {
             int j;
 
             if (this.tracker.isPassenger()) {
-                i = MathHelper.d(this.tracker.yaw * 256.0F / 360.0F);
-                j = MathHelper.d(this.tracker.pitch * 256.0F / 360.0F);
+                i = MathHelper.d(this.tracker.yaw * 256.0F / 360.0F); // Tuinity - diff on change, used in forceStaleMeta
+                j = MathHelper.d(this.tracker.pitch * 256.0F / 360.0F); // Tuinity - diff on change, used in forceStaleMeta
                 boolean flag = Math.abs(i - this.yRot) >= 1 || Math.abs(j - this.xRot) >= 1;
 
                 if (flag) {
@@ -253,11 +254,28 @@ public class EntityTrackerEntry {
 
     }
 
+    // Tuinity end - optimise entity tracking
+    // TODO make use of this in second pass rewrite
+    final void resetState() {
+        // required since we do not tick all tracker entries unless they have trackers - so data can and will get stale
+        if (this.trackedPlayers.size() != 0) {
+            return;
+        }
+
+        this.synchronizeLocation();
+        this.writeStaleData();
+        this.xRot = MathHelper.d(this.tracker.yaw * 256.0F / 360.0F); // Tuinity - diff on change, used in forceStaleMeta
+        this.yRot = MathHelper.d(this.tracker.pitch * 256.0F / 360.0F); // Tuinity - diff on change, used in forceStaleMeta
+    }
+    // Tuinity end - optimise entity tracking
+
+    public final void onUntrack(EntityPlayer player) { this.a(player); } // Tuinity - OBFHELPER
     public void a(EntityPlayer entityplayer) {
         this.tracker.c(entityplayer);
         entityplayer.c(this.tracker);
     }
 
+    public final void onTrack(EntityPlayer player) { this.b(player); } // Tuinity - OBFHELPER
     public void b(EntityPlayer entityplayer) {
         PlayerConnection playerconnection = entityplayer.playerConnection;
 
@@ -357,6 +375,7 @@ public class EntityTrackerEntry {
 
     }
 
+    private final void writeStaleData() { this.c(); } // Tuinity - OBFHELPER
     private void c() {
         DataWatcher datawatcher = this.tracker.getDataWatcher();
 
@@ -382,6 +401,7 @@ public class EntityTrackerEntry {
 
     }
 
+    private final void synchronizeLocation() { this.d(); } // Tuinity - OBFHELPER
     private void d() {
         this.xLoc = PacketPlayOutEntity.a(this.tracker.locX());
         this.yLoc = PacketPlayOutEntity.a(this.tracker.locY());
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 30af7deaa1cd168d4defaecc43b5e33fa31527ab..41db80b7c1819e660f735cd298f2b5ffadbd86e3 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -146,6 +146,14 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Tuinity start - optimise PlayerChunkMap#isOutsideRange
         this.playerChunkTickRangeMap.update(player, chunkX, chunkZ, ChunkMapDistance.MOB_SPAWN_RANGE);
         // Tuinity end - optimise PlayerChunkMap#isOutsideRange
+
+        // Tuinity start - use distance map to optimise entity tracker
+        // force propagate tracker changes
+        if (this.playerEntityTrackerTrackMap != null) {
+            this.playerEntityTrackerTrackMap.update(player, chunkX, chunkZ, Math.min(this.entityTrackerTrackRange, effectiveViewDistance));
+            this.playerEntityTrackerUntrackMap.update(player, chunkX, chunkZ, Math.min(this.entityTrackerUntrackRange, effectiveViewDistance));
+        }
+        // Tuinity end - use distance map to optimise entity tracker
     }
 
     final class ChunkSendThrottler {
@@ -364,6 +372,25 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     // Tuinity end - optimise PlayerChunkMap#isOutsideRange
 
+    // Tuinity start - use distance map to optimise entity tracker
+    public final com.tuinity.tuinity.util.map.PlayerAreaMap playerEntityTrackerTrackMap;
+    public final com.tuinity.tuinity.util.map.PlayerAreaMap playerEntityTrackerUntrackMap;
+    public final int entityTrackerTrackRange;
+    public final int entityTrackerUntrackRange;
+
+    //public final com.tuinity.tuinity.util.EntityList activelyTrackedEntities; // TODO not yet
+    final com.tuinity.tuinity.util.EntityList activelyTrackedEntitiesLegacy;
+
+    public static boolean isLegacyTrackingEntity(Entity entity) {
+        return entity.isLegacyTrackingEntity;
+    }
+
+    private static int getEntityTrackingChunkRange(int blockRange) {
+        int centerChunkRange = (blockRange - 8); // on average, players are in the middle of a chunk, so subtract 8
+        return centerChunkRange >>> 4 + ((centerChunkRange & 15) != 0 ? 1 : 0);
+    }
+    // Tuinity end - use distance map to optimise entity tracker
+
     void addPlayerToDistanceMaps(EntityPlayer player) {
         this.updateMaps(player);
 
@@ -416,6 +443,13 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         this.playerMobSpawnMap.remove(player);
         this.playerChunkTickRangeMap.remove(player);
         // Tuinity end - optimise PlayerChunkMap#isOutsideRange
+
+        // Tuinity start - use distance map to optimise entity tracker
+        if (this.playerEntityTrackerTrackMap != null) {
+            this.playerEntityTrackerTrackMap.remove(player);
+            this.playerEntityTrackerUntrackMap.remove(player);
+        }
+        // Tuinity end - use distance map to optimise entity tracker
     }
 
     void updateDistanceMapsTuinity(EntityPlayer player) {
@@ -444,39 +478,17 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Tuinity start - optimise PlayerChunkMap#isOutsideRange
         this.playerChunkTickRangeMap.update(player, chunkX, chunkZ, ChunkMapDistance.MOB_SPAWN_RANGE);
         // Tuinity end - optimise PlayerChunkMap#isOutsideRange
-    }
-    // Tuinity end
-
-    // Paper start - Reduce entity tracker updates on move
-    private double trackerUpdateDistanceSquared;
-    private final Int2ObjectMap<Int2ObjectMap<PlayerChunkMap.EntityTracker>> playerTrackedEntities = new Int2ObjectOpenHashMap<>();
-    private final Int2ObjectMap<Queue<Integer>> playerTrackedEntitiesRemoveQueue = new Int2ObjectOpenHashMap<>();
 
-    void flushRemoveQueue(EntityPlayer entityplayer) {
-        Queue<Integer> removeQueue = getPlayerTrackedEntityMapRemoveQueue(entityplayer.getId());
-        Int2ObjectMap<PlayerChunkMap.EntityTracker> entityMap = getPlayerTrackedEntityMap(entityplayer.getId());
-        for (Integer id = removeQueue.poll(); id != null; id = removeQueue.poll()) {
-            entityMap.remove(id);
+        // Tuinity start - use distance map to optimise entity tracker
+        if (this.playerEntityTrackerTrackMap != null) {
+            this.playerEntityTrackerTrackMap.update(player, chunkX, chunkZ, Math.min(this.entityTrackerTrackRange, effectiveViewDistance));
+            this.playerEntityTrackerUntrackMap.update(player, chunkX, chunkZ, Math.min(this.entityTrackerUntrackRange, effectiveViewDistance));
         }
+        // Tuinity end - use distance map to optimise entity tracker
     }
+    // Tuinity end
 
-    void flushRemoveQueues() {
-        for (Int2ObjectMap.Entry<Queue<Integer>> entry : playerTrackedEntitiesRemoveQueue.int2ObjectEntrySet()) {
-            Int2ObjectMap<EntityTracker> entityMap = getPlayerTrackedEntityMap(entry.getKey());
-            Queue<Integer> removeQueue = entry.getValue();
-            for (Integer id = removeQueue.poll(); id != null; id = removeQueue.poll()) {
-                entityMap.remove(id);
-            }
-        }
-    }
-
-    Int2ObjectMap<EntityTracker> getPlayerTrackedEntityMap(int id) {
-        return playerTrackedEntities.computeIfAbsent(id, i -> new Int2ObjectOpenHashMap<>());
-    }
-
-    Queue<Integer> getPlayerTrackedEntityMapRemoveQueue(int id) {
-        return playerTrackedEntitiesRemoveQueue.computeIfAbsent(id, i -> new java.util.ArrayDeque<>());
-    }
+    // Tuinity - revert, conflicts with optimised-tracker
 
     // Paper end
 
@@ -512,7 +524,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         this.m = new VillagePlace(new File(this.w, "poi"), datafixer, this.world); // Paper
         this.setViewDistance(i);
         //this.playerMobDistanceMap = this.world.paperConfig.perPlayerMobSpawns ? new com.destroystokyo.paper.util.PlayerMobDistanceMap() : null; // Paper // Tuinity - distance maps
-        this.trackerUpdateDistanceSquared = Math.pow(this.world.paperConfig.trackerUpdateDistance, 2); // Paper
+        //this.trackerUpdateDistanceSquared = Math.pow(this.world.paperConfig.trackerUpdateDistance, 2); // Paper // Tuinity - revert, conflicts with optimised-tracker
         // Tuinity start - distance maps
         com.tuinity.tuinity.util.map.PooledLinkedHashSets<EntityPlayer> sets = this.pooledEntityPlayerSets;
         this.playerViewDistanceMap = new com.tuinity.tuinity.util.map.PlayerAreaMap(sets);
@@ -591,6 +603,76 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     }
                 });
         // Tuinity end
+
+        // Tuinity start - use distance map to optimise entity tracker
+        if (!this.world.tuinityConfig.useOptimizedTracker) {
+            this.playerEntityTrackerTrackMap = null;
+            this.playerEntityTrackerUntrackMap = null;
+            this.entityTrackerTrackRange = -1;
+            this.entityTrackerUntrackRange = -1;
+            this.activelyTrackedEntitiesLegacy = null;
+        } else {
+            this.activelyTrackedEntitiesLegacy = new com.tuinity.tuinity.util.EntityList();
+
+            // avoid player range, that's special-cased
+            int maxEntityTrackRange = this.world.spigotConfig.animalTrackingRange;
+            if (this.world.spigotConfig.monsterTrackingRange > maxEntityTrackRange) {
+                maxEntityTrackRange = this.world.spigotConfig.monsterTrackingRange;
+            }
+            if (this.world.spigotConfig.miscTrackingRange > maxEntityTrackRange) {
+                maxEntityTrackRange = this.world.spigotConfig.miscTrackingRange;
+            }
+            if (this.world.spigotConfig.otherTrackingRange > maxEntityTrackRange) {
+                maxEntityTrackRange = this.world.spigotConfig.otherTrackingRange;
+            }
+            maxEntityTrackRange = (maxEntityTrackRange >> 4) + ((maxEntityTrackRange & 15) != 0 ? 1 : 0);
+
+            if (this.world.tuinityConfig.optimizedTrackerTrackRange == -1) {
+                this.entityTrackerUntrackRange = this.entityTrackerTrackRange = Math.max(1, maxEntityTrackRange - 1);
+            } else {
+                this.entityTrackerTrackRange = this.world.tuinityConfig.optimizedTrackerTrackRange;
+                this.entityTrackerUntrackRange = this.world.tuinityConfig.optimizedTrackerUntrackRange;
+            }
+
+            this.playerEntityTrackerTrackMap = new com.tuinity.tuinity.util.map.PlayerAreaMap(sets,
+                    (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                     com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {
+                        Chunk chunk = PlayerChunkMap.this.world.getChunkProvider().getChunkAtIfCachedImmediately(rangeX, rangeZ);
+                        if (chunk == null) {
+                            return;
+                        }
+                        Entity[] entities = chunk.entities.getRawData();
+                        for (int index = 0, len = chunk.entities.size(); index < len; ++index) {
+                            Entity entity = entities[index];
+                            if (entity.tracker == null) {
+                                entity.addToTrackQueue(player);
+                            } else {
+                                entity.tracker.updateTrackingPlayer(player);
+                                entity.clearTrackingQueues(player);
+                            }
+                        }
+                    },
+                    null);
+            this.playerEntityTrackerUntrackMap = new com.tuinity.tuinity.util.map.PlayerAreaMap(sets,
+                    null,
+                    (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                     com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {
+                        Chunk chunk = PlayerChunkMap.this.world.getChunkProvider().getChunkAtIfCachedImmediately(rangeX, rangeZ);
+                        if (chunk == null) {
+                            return;
+                        }
+                        Entity[] entities = chunk.entities.getRawData();
+                        for (int index = 0, len = chunk.entities.size(); index < len; ++index) {
+                            Entity entity = entities[index];
+                            if (entity.tracker == null) {
+                                return; // not tracked by player for sure
+                            }
+                            entity.tracker.removeTrackingPlayer(player);
+                            entity.clearTrackingQueues(player);
+                        }
+                    });
+        }
+        // Tuinity end - use distance map to optimise entity tracker
     }
 
     public void updatePlayerMobTypeMap(Entity entity) {
@@ -1813,19 +1895,10 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     public void movePlayer(EntityPlayer entityplayer) {
-        // Paper start
-        // ObjectIterator objectiterator = this.trackedEntities.values().iterator();
-        ObjectIterator objectiterator;
+        if (this.playerEntityTrackerTrackMap == null) { // Tuinity - optimized tracker
+        ObjectIterator objectiterator = this.trackedEntities.values().iterator();  // Tuinity - revert, conflicts with optimised-tracker
 
-        if (MinecraftServer.currentTick - entityplayer.lastTrackedTick >= 20
-            || entityplayer.lastTrackedPosition.distanceSquared(entityplayer.getPositionVector()) >= trackerUpdateDistanceSquared) {
-            entityplayer.lastTrackedPosition = entityplayer.getPositionVector();
-            entityplayer.lastTrackedTick = MinecraftServer.currentTick;
-            objectiterator = this.trackedEntities.values().iterator(); // Update all entity trackers
-        } else {
-            objectiterator = getPlayerTrackedEntityMap(entityplayer.getId()).values().iterator(); // Only update entity trackers for already tracked entities
-        }
-        // Paper end
+        // Tuinity - revert, conflicts with optimised-tracker
         while (objectiterator.hasNext()) {
             PlayerChunkMap.EntityTracker playerchunkmap_entitytracker = (PlayerChunkMap.EntityTracker) objectiterator.next();
 
@@ -1835,7 +1908,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 playerchunkmap_entitytracker.updatePlayer(entityplayer);
             }
         }
-        flushRemoveQueues(); // Paper
+        } // Tuinity - optimized tracker // Tuinity - revert, conflicts with optimised-tracker
 
         int i = MathHelper.floor(entityplayer.locX()) >> 4;
         int j = MathHelper.floor(entityplayer.locZ()) >> 4;
@@ -1948,11 +2021,36 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
                     entity.tracker = playerchunkmap_entitytracker; // Paper - Fast access to tracker
                     this.trackedEntities.put(entity.getId(), playerchunkmap_entitytracker);
+                    if (this.playerEntityTrackerTrackMap == null) { // Tuinity - implement optimized tracker
                     playerchunkmap_entitytracker.track(this.world.getPlayers());
+                        // Tuinity start - implement optimized tracker
+                    } else {
+                        if (PlayerChunkMap.isLegacyTrackingEntity(entity)) {
+                            this.activelyTrackedEntitiesLegacy.add(entity);
+                            // tracker tick will propagate updates
+                        } else {
+                            int chunkX = com.tuinity.tuinity.util.Util.getChunkCoordinate(entity.locX());
+                            int chunkZ = com.tuinity.tuinity.util.Util.getChunkCoordinate(entity.locZ());
+                            com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> playersTracking = this.playerEntityTrackerTrackMap.getObjectsInRange(chunkX, chunkZ);
+                            if (playersTracking != null) {
+                                Object[] backingSet = playersTracking.getBackingSet();
+                                for (int index = 0, len = backingSet.length; index < len; ++index) {
+                                    Object temp = backingSet[index];
+                                    if (!(temp instanceof EntityPlayer)) {
+                                        continue;
+                                    }
+                                    EntityPlayer trackingPlayer = (EntityPlayer) temp;
+                                    playerchunkmap_entitytracker.updateTrackingPlayer(trackingPlayer);
+                                }
+                            }
+                        }
+                    }
+                    // Tuinity end - implement optimized tracker
                     if (entity instanceof EntityPlayer) {
                         EntityPlayer entityplayer = (EntityPlayer) entity;
 
                         this.a(entityplayer, true);
+                        if (this.playerEntityTrackerTrackMap == null) { // Tuinity - implement optimized tracker
                         ObjectIterator objectiterator = this.trackedEntities.values().iterator();
 
                         while (objectiterator.hasNext()) {
@@ -1962,6 +2060,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                                 playerchunkmap_entitytracker1.updatePlayer(entityplayer);
                             }
                         }
+                        } // Tuinity - implement optimized tracker
                     }
 
                 }
@@ -1982,26 +2081,112 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
                 playerchunkmap_entitytracker.clear(entityplayer);
             }
-            // Paper start
-            playerTrackedEntities.remove(entityplayer.getId());
-            playerTrackedEntitiesRemoveQueue.remove(entityplayer.getId());
-            // Paper end
+            // Tuinity - revert, conflicts with optimised-tracker
         }
 
         PlayerChunkMap.EntityTracker playerchunkmap_entitytracker1 = (PlayerChunkMap.EntityTracker) this.trackedEntities.remove(entity.getId());
 
         if (playerchunkmap_entitytracker1 != null) {
             playerchunkmap_entitytracker1.a();
-            // Paper start
-            for (EntityPlayer player : playerchunkmap_entitytracker1.trackedPlayers) {
-                getPlayerTrackedEntityMap(player.getId()).remove(playerchunkmap_entitytracker1.tracker.getId());
-            }
-            // Paper end
+            // Tuinity - revert, conflicts with optimised-tracker
         }
         entity.tracker = null; // Paper - We're no longer tracked
+        // Tuinity start - optimise entity tracking - we're no longer tracked
+        if (this.activelyTrackedEntitiesLegacy != null) {
+            this.activelyTrackedEntitiesLegacy.remove(entity);
+        }
+        // Tuinity end - optimise entity tracking - we're no longer tracked
     }
 
+    // Tuinity start - optimized tracker
+    private void processTrackQueue() {
+        // handle queued changes
+
+        this.world.timings.tracker1.startTiming();
+        for (Entity tracked : this.world.trackingUpdateQueue) {
+            EntityTracker tracker = tracked.tracker;
+            if (tracker == null) {
+                continue;
+            }
+            // queued tracks
+            for (it.unimi.dsi.fastutil.ints.IntIterator iterator = tracked.trackQueue.iterator(); iterator.hasNext();) {
+                int id = iterator.nextInt();
+                Entity player = this.world.entitiesById.get(id);
+
+                if (!(player instanceof EntityPlayer)) {
+                    continue;
+                }
+
+                // double-check to make sure we're in range...
+                int chunkX = com.tuinity.tuinity.util.Util.getChunkCoordinate(player.locX());
+                int chunkZ = com.tuinity.tuinity.util.Util.getChunkCoordinate(player.locZ());
+
+                com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> inRange =
+                        this.playerEntityTrackerUntrackMap.getObjectsInRange(chunkX, chunkZ);
+
+                if (inRange != null && inRange.contains(player)) {
+                    tracker.updateTrackingPlayer((EntityPlayer)player);
+                } else {
+                    tracker.removeTrackingPlayer((EntityPlayer)player);
+                }
+            }
+            tracked.trackQueue.clear();
+
+            // queued untracks
+            for (it.unimi.dsi.fastutil.ints.IntIterator iterator = tracked.unTrackQueue.iterator(); iterator.hasNext();) {
+                int id = iterator.nextInt();
+                Entity player = this.world.entitiesById.get(id);
+
+                if (!(player instanceof EntityPlayer)) {
+                    continue;
+                }
+
+                tracker.removeTrackingPlayer((EntityPlayer)player);
+            }
+            tracked.unTrackQueue.clear();
+        }
+        this.world.trackingUpdateQueue.clear();
+        this.world.timings.tracker1.stopTiming();
+
+        // broadcast updates
+
+        this.world.timings.tracker2.startTiming();
+        for (Entity tracked : this.world.loadedEntities) {
+            EntityTracker tracker = tracked.tracker;
+            if (tracker != null) {
+                tracker.trackerEntry.tick();
+            }
+        }
+        this.world.timings.tracker2.stopTiming();
+
+        // legacy tracker
+
+        Entity[] legacyEntities = this.activelyTrackedEntitiesLegacy.getRawData();
+        for (int i = 0, size = this.activelyTrackedEntitiesLegacy.size(); i < size; ++i) {
+            Entity entity = legacyEntities[i];
+            EntityTracker tracker = this.trackedEntities.get(entity.getId());
+            if (tracker == null) {
+                MinecraftServer.LOGGER.error("Legacy tracking entity has no tracker! No longer tracking entity " + entity);
+                this.activelyTrackedEntitiesLegacy.remove(entity);
+                --i;
+                --size;
+                continue;
+            }
+
+            EntityTrackerEntry entry = tracker.trackerEntry;
+            tracker.track(this.world.getPlayers());
+            entry.tick(); // always tick the entry, even if no player is tracking
+        }
+    }
+    // Tuinity end - optimized tracker
+
     protected void g() {
+        // Tuinity start - optimized tracker
+        if (this.playerEntityTrackerTrackMap != null) {
+            this.processTrackQueue();
+            return;
+        }
+        // Tuinity end - optimized tracker
         List<EntityPlayer> list = Lists.newArrayList();
         List<EntityPlayer> list1 = this.world.getPlayers();
 
@@ -2037,7 +2222,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             }
             world.timings.tracker2.stopTiming(); // Paper
         }
-        flushRemoveQueues(); // Paper
+        // Tuinity - revert, conflicts with optimised-tracker
 
     }
 
@@ -2070,6 +2255,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         PacketDebug.a(this.world, chunk.getPos());
         List<Entity> list = Lists.newArrayList();
         List<Entity> list1 = Lists.newArrayList();
+        if (this.playerEntityTrackerTrackMap == null) { // Tuinity - implement optimized tracker
         ObjectIterator objectiterator = this.trackedEntities.values().iterator();
 
         while (objectiterator.hasNext()) {
@@ -2087,7 +2273,33 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 }
             }
         }
-        flushRemoveQueue(entityplayer); // Paper
+            // Tuinity - revert, conflicts with optimised-tracker
+            // Tuinity  start- implement optimized tracker
+        } else {
+            // Tuinity - implement optimized tracker
+            // Tuinity start - implement optimized tracker
+            // It's important to note that this is ONLY called when the chunk is at ticking level.
+            // At this point, the entities should be added in the chunk.
+            com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> playersInRange
+                    = this.playerEntityTrackerTrackMap.getObjectsInRange(chunk.getPos());
+            // only send entities when they're in tracking range...
+            if (playersInRange != null && playersInRange.contains(entityplayer)) {
+                chunk.forEachEntity((Entity entityInChunk) -> {
+                    PlayerChunkMap.EntityTracker tracker = entityInChunk.tracker;
+                    if (tracker == null) {
+                        return; // when added to tracker, this entity will propagate to players
+                    }
+
+                    if (entityInChunk == entityplayer) {
+                        return; // can't track himself
+                    }
+
+                    // Note: We don't add to the lists because the track logic will handle it
+                    tracker.updateTrackingPlayer(entityplayer);
+                });
+            }
+        }
+        // Tuinity end - implement optimized tracker
 
         Iterator iterator;
         Entity entity1;
@@ -2125,7 +2337,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     public class EntityTracker {
 
-        private final EntityTrackerEntry trackerEntry;
+        final EntityTrackerEntry trackerEntry; // Tuinity - private -> package private
         private final Entity tracker;
         private final int trackingDistance;
         private SectionPosition e;
@@ -2184,7 +2396,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
             if (this.trackedPlayers.remove(entityplayer)) {
                 this.trackerEntry.a(entityplayer);
-                getPlayerTrackedEntityMap(entityplayer.getId()).remove(this.tracker.getId()); // Paper
+                // Tuinity - revert, conflicts with optimised-tracker
             }
 
         }
@@ -2224,11 +2436,11 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
                     if (flag1 && this.trackedPlayerMap.putIfAbsent(entityplayer, true) == null) { // Paper
                         this.trackerEntry.b(entityplayer);
-                        getPlayerTrackedEntityMap(entityplayer.getId()).put(this.tracker.getId(), this); // Paper
+                        // Tuinity - revert, conflicts with optimised-tracker
                     }
                 } else if (this.trackedPlayers.remove(entityplayer)) {
                     this.trackerEntry.a(entityplayer);
-                    getPlayerTrackedEntityMapRemoveQueue(entityplayer.getId()).add(this.tracker.getId()); // Paper
+                    // Tuinity - revert, conflicts with optimised-tracker
                 }
 
             }
@@ -2251,6 +2463,44 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             return i;
         }
 
+        // Tuinity start - optimized tracker
+        public final void updateTrackingPlayer(EntityPlayer entityplayer) {
+            if (entityplayer == this.tracker) {
+                return;
+            }
+            com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Tracker update"); // Tuinity
+            // the same as updatePlayer except without a distance check
+            // we also add a world check since we queue tracking changes
+            // TODO check on update
+            // CraftBukkit start - respect vanish API
+            boolean shouldTrack = entityplayer.world == tracker.world;
+            if (this.tracker instanceof EntityPlayer) {
+                Player player = ((EntityPlayer)this.tracker).getBukkitEntity();
+                if (!entityplayer.getBukkitEntity().canSee(player)) {
+                    shouldTrack = false;
+                }
+            }
+
+            entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
+            // CraftBukkit end
+
+            if (shouldTrack) {
+                if (this.trackedPlayerMap.putIfAbsent(entityplayer, true) == null) { // Paper
+                    this.trackerEntry.onTrack(entityplayer);
+                }
+            } else {
+                this.removeTrackingPlayer(entityplayer);
+            }
+        }
+
+        public final void removeTrackingPlayer(EntityPlayer player) {
+            com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Tracker update"); // Tuinity
+            if (this.trackedPlayers.remove(player)) {
+                this.trackerEntry.onUntrack(player);
+            }
+        }
+        // Tuinity end - optimized tracker
+
         public void track(List<EntityPlayer> list) {
             Iterator iterator = list.iterator();
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index a90c5b9cebeea71dff6892f976f8133c81c7a8ca..09852a733befc1b394405a290cd29cb1c2fe5673 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -82,6 +82,8 @@ public class WorldServer extends World {
         return new Throwable(entity + " Added to world at " + new java.util.Date());
     }
 
+    final com.tuinity.tuinity.util.EntityList trackingUpdateQueue = new com.tuinity.tuinity.util.EntityList(); // Tuinity - optimise tracker
+
     // Paper start - optimise getPlayerByUUID
     @Nullable
     @Override
@@ -830,6 +832,10 @@ public class WorldServer extends World {
         int k = MathHelper.floor(entity.locZ() / 16.0D);
 
         if (!entity.inChunk || entity.chunkX != i || entity.chunkY != j || entity.chunkZ != k) {
+            // Tuinity start - optimized tracker
+            int prevChunkX = entity.chunkX;
+            int prevChunkZ = entity.chunkZ;
+            // Tuinity end - optimized tracker
             if (entity.inChunk && this.isChunkLoaded(entity.chunkX, entity.chunkZ)) {
                 this.getChunkAt(entity.chunkX, entity.chunkZ).a(entity, entity.chunkY);
             }
@@ -839,6 +845,83 @@ public class WorldServer extends World {
             } else {
                 this.getChunkAt(i, k).a(entity);
             }
+            // Tuinity start - optimized tracker
+            int newChunkX = entity.chunkX;
+            int newChunkZ = entity.chunkZ;
+            if (entity.valid && (prevChunkX != newChunkX || prevChunkZ != newChunkZ)) {
+                PlayerChunkMap chunkMap = this.getChunkProvider().playerChunkMap;
+                if (chunkMap.playerEntityTrackerTrackMap != null) {
+                    if (!PlayerChunkMap.isLegacyTrackingEntity(entity)) {
+                        // handle tracking
+                        com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> oldRange =
+                                chunkMap.playerEntityTrackerTrackMap.getObjectsInRange(prevChunkX, prevChunkZ);
+                        com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newRange =
+                                chunkMap.playerEntityTrackerTrackMap.getObjectsInRange(newChunkX, newChunkZ);
+
+                        if (oldRange != newRange) { // optimization: equal pooled sets are identity equal
+                            if (newRange != null) {
+                                if (oldRange == null) {
+                                    Object[] backingSet = newRange.getBackingSet();
+                                    for (int index = 0, len = backingSet.length; index < len; ++index) {
+                                        Object temp = backingSet[index];
+                                        if (!(temp instanceof EntityPlayer)) {
+                                            continue;
+                                        }
+                                        EntityPlayer player = (EntityPlayer) temp;
+                                        entity.addToTrackQueue(player);
+                                    }
+                                } else {
+                                    Object[] backingSet = newRange.getBackingSet();
+                                    for (int index = 0, len = backingSet.length; index < len; ++index) {
+                                        Object temp = backingSet[index];
+                                        if (!(temp instanceof EntityPlayer)) {
+                                            continue;
+                                        }
+                                        EntityPlayer player = (EntityPlayer) temp;
+                                        if (oldRange.contains(player)) {
+                                            continue;
+                                        }
+                                        entity.addToTrackQueue(player);
+                                    }
+                                }
+                            }
+                        }
+
+                        // handle untracking
+                        oldRange = chunkMap.playerEntityTrackerUntrackMap.getObjectsInRange(prevChunkX, prevChunkZ);
+                        newRange = chunkMap.playerEntityTrackerUntrackMap.getObjectsInRange(newChunkX, newChunkZ);
+                        if (oldRange != newRange) { // optimization: equal pooled sets are identity equal
+                            if (oldRange != null) {
+                                if (newRange == null) {
+                                    Object[] backingSet = oldRange.getBackingSet();
+                                    for (int index = 0, len = backingSet.length; index < len; ++index) {
+                                        Object temp = backingSet[index];
+                                        if (!(temp instanceof EntityPlayer)) {
+                                            continue;
+                                        }
+                                        EntityPlayer player = (EntityPlayer) temp;
+                                        entity.addToUntrackQueue(player);
+                                    }
+                                } else {
+                                    Object[] backingSet = oldRange.getBackingSet();
+                                    for (int index = 0, len = backingSet.length; index < len; ++index) {
+                                        Object temp = backingSet[index];
+                                        if (!(temp instanceof EntityPlayer)) {
+                                            continue;
+                                        }
+                                        EntityPlayer player = (EntityPlayer) temp;
+                                        if (newRange.contains(player)) {
+                                            continue;
+                                        }
+                                        entity.addToUntrackQueue(player);
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+            // Tuinity end - optimized tracker
         }
 
         this.getMethodProfiler().exit();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 651ff6647398747199cbfcc5f49b8ccd707609af..516a0164809656af85f2880da7de9a403ed1c958 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1275,7 +1275,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         PlayerChunkMap.EntityTracker entry = tracker.trackedEntities.get(other.getId());
         if (entry != null && !entry.trackedPlayers.contains(getHandle())) {
+            if (getHandle().getWorldServer().getChunkProvider().playerChunkMap.playerEntityTrackerTrackMap == null) { // Tuinity - optimized tracker
             entry.updatePlayer(getHandle());
+                // Tuinity start - optimized tracker
+            } else {
+                other.addToTrackQueue(other);
+            }
+            // Tuinity end - optimized tracker
         }
     }
     // Paper start
